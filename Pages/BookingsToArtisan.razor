@page "/bookingsToMe"
@inject Core.Helpers.TimeHelpers th
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAppointmentService AppointmentService;
@inject UserManager<ApplicationUser> UserManager;
@inject IAppUserService UserService;
@inject IProfileOperationService ProfileOperationservice;
@inject IOperationService OpService;

<h3>Bookings to me</h3>

<AuthorizeView Roles="Artisan">
    <Authorized>

        @if (show)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Client</th>
                        <th>Operations</th>
                        <th>Price</th>
                        <th>Date</th>
                        <th>Duration</th>
                    </tr>
                </thead>
                <tbody>
                    @if (appointments != null)
                    {
                        @foreach (var a in appointments)
                        {
                            <tr>

                                <td>@customers.Find(c => c.Id == a.CustomerId).Email</td>
                                <td>
                                    @foreach (var o in appointmentOps)
                                    {
                                        if (o.AppointmentId == a.Id)
                                        {
                                            @operations.Find(x => x.Id == o.ProfileOperation.OperationId).Name
                                            <br />
                                        }
                                    }
                                </td>
                                <td>@a.Price €</td>
                                <td>@Convert.ToDateTime(a.Date).ToString("dd-MMMM-yy HH:mm")</td>
                                <td>@(th.HoursAndMinutesString(a.EstimatedDuration))</td>
                                <td>
                                    @if (!a.Accepted)
                                    {
                                        <button class="btn-outline-success" @onclick="(() => ConfirmAppointment(a.Id))">Confirm</button>
                                    }

                                    @if (a.Accepted)
                                    {
                                        <button class="alert-danger" @onclick="(()=>CancelAppointment(a.Id))">Cancel</button>
                                    }
                                </td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not logged in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    string userId;
    List<Appointment> appointments = new List<Appointment>();
    List<AppointmentOperations> appointmentOps = new List<AppointmentOperations>();
    List<ApplicationUser> customers = new List<ApplicationUser>();
    List<ProfileOperation> profOps = new List<ProfileOperation>();
    List<Operation> operations = new List<Operation>();


    string message;
    bool show = false;

    private async void ConfirmAppointment(string appointmentId)
    {
        await AppointmentService.ConfirmAppointment(appointmentId);
    }
    private async void CancelAppointment(string appointmentId)
    {
        await AppointmentService.CancelAppointment(appointmentId);
    }


    protected override async Task OnInitializedAsync()
    {
        await GetUser();
        if (userId != null)
        {
            appointments = await AppointmentService.GetArtisanAppointments(userId);
            appointments.Sort((x, y) => DateTime.Compare(x.Date, y.Date));
            appointmentOps = await AppointmentService.GetArtisanAppointmentOperations(userId);
            profOps.AddRange(await ProfileOperationservice.GetProfileOperations(userId));

            foreach (Appointment a in appointments)
            {
                customers.Add(await UserService.GetAppUserByIdAsync(a.CustomerId));
            }

            foreach (ProfileOperation po in profOps)
            {
                operations.Add(await OpService.GetOperationByIdAsync(po.OperationId));
            }
            ToggleShow();
        }
    }

    private async Task GetUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var _user = authState.User;
        if (_user.Identity.IsAuthenticated)
        {
            var currentUser = await UserManager.GetUserAsync(_user);
            userId = currentUser.Id;
        }
    }

    public void ToggleShow()
    {
        show = !show;
    }

}
